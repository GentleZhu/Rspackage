{"name":"Rspackage","tagline":"","body":"<script type=\"text/x-mathjax-config\">\r\n  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}});\r\n</script>\r\n<script type=\"text/javascript\"\r\n  src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\r\n</script>\r\n# Rspackage\r\nRspackage is a simple, easy-to-use&develop software/libraray for Recommender System train and prediction. Currently, this package just start, and more features and algorithms will be added soon.\r\n\r\n##Table of Cotents\r\n\r\n- Installation and Data Format\r\n- Algorithms\r\n- Usage\r\n- Examples\r\n- Eigen Version\r\n- Further development\r\n\r\n##Installation and Data Format\r\n\r\nOn Unix-like system, type `make` to build main(sample program).\r\n\r\nOn other systems, Visiual Stdio/Xcode can directly build project on Rspackage.\r\n\r\nThe format of training validation and testing data file is:\r\n\r\n```<user>  <rating>  <time>```\r\n\r\n##Algorithms\r\n\r\n- Matrix Factorizaion\r\n- Item-based KNN\r\n- Neural network blending\r\n\r\n###Matrix Factorization\r\n$$ \\hat{r}_{u,i}=\\bar{r}+b_u^{user}+b_i^{item}+\\rm{p_u}^T\\rm{q_i}$$\r\n\r\n###Item-based KNN\r\n\r\n$$ \\hat{r}\\_{u,i}=\\frac{\\sum\\_{j\\in G_k(u,i)} w\\_{ij}\\cdot r\\_{uj}}{\\sum\\_{j\\in G_k(u,i)} w\\_{ij}}  $$\r\n\r\n###Neural network\r\nComming soon...\r\n\r\n##Usage\r\n\r\nThe sample program named main.cc is shown as follows:\r\n\r\n```\r\n#include \"algorithms/basicMF.h\"\r\n#include \"algorithms/basicKNN.h\"\r\n#include \"algorithms/matrix/basicMF_m.h\"\r\n\r\n#include <iostream>\r\nusing namespace std;\r\nint main(int argc, char const *argv[])\r\n{\r\n\tbasicSolver* s=new basicKNN(\"ua.base\");\r\n\t//Read the training set\r\n\ts->Init();\r\n\t//Train with validation set of none\r\n\ts->train(\"validation dataset\");\r\n\t//Predict\r\n\tcout<<\"Predict error:\"<<s->predict(\"ua.test\")<<endl;\r\n\tdelete s;\r\n\treturn 0;\r\n}\r\n```\r\n\r\nClass basicMF provides basic Matrix Factorization function, and the train set and number of features are initialized by Constructor.\r\n\r\nClass basicKNN provides item-based KNN algorithm.\r\n\r\n##Examples\r\n__Result on Movielens-100k__\r\n\r\nAlgorithms   | MAE           | RMSE\r\n------------ | ------------- | ------------\r\nbasicMF      | 0.738367      | 0.935906 \r\nbasicKNN     | 0.772263      | 0.981548 \r\n\r\nMore datasets will be tested.\r\n\r\n##Eigen Version\r\nRspackage involves a lot of matrix operations, So it provides a matrix version.\r\n\r\n[**Eigen is a C++ template library for linear algebra: matrices, vectors, numerical solvers, and related algorithms.**](http://eigen.tuxfamily.org/index.php?title=Main_Page)\r\n\r\nThe solver basicMF_m is implemented with Eigen library, it looks pretty but a littile time consuming than original version, although it runs faster than matlab, python.\r\n\r\n##Further Development\r\n\r\nNow I am ready to add blending techniques and RBM methods into Rspackage, which is common in competitions. \r\n\r\nRspackage is easy to extend. The class rating and basicSolver is basis of complex individous model, and people can easily write their own solver.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}